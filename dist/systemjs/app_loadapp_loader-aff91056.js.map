{
  "version": 3,
  "sources": [
    "../../src/app_loader/app_loader_utils.js",
    "../../src/app_loader/app_loader.js"
  ],
  "names": [
    "t",
    "f",
    "args",
    "i",
    "arguments",
    "length",
    "Promise",
    "resolve",
    "apply",
    "this",
    "e",
    "reject",
    "r",
    "value",
    "then",
    "direct",
    "o",
    "u",
    "body",
    "result",
    "recover",
    "c",
    "loadCSSAndFonts",
    "cssUrl",
    "timeout",
    "onCssReady",
    "l",
    "onFontsReady",
    "loadedPromise",
    "_async",
    "injectCSS",
    "document",
    "fonts",
    "ready",
    "race",
    "setTimeout",
    "crossOrigin",
    "link",
    "createElement",
    "rel",
    "onload",
    "onerror",
    "href",
    "head",
    "appendChild",
    "nextIDLEPromise",
    "window",
    "requestIdleCallback",
    "n",
    "requestAnimationFrame",
    "d",
    "updateSplashscreenText",
    "appLoaderCssPromise",
    "System",
    "appPromise",
    "importApp",
    "onJsReady",
    "appCSSPromise",
    "app",
    "createMilleSabordGame",
    "into",
    "querySelector",
    "onLoadProgress",
    "loadedCount",
    "total",
    "module"
  ],
  "mappings": "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",
  "sourcesContent": [
    "export const loadCSSAndFonts = async (\n  cssUrl,\n  { timeout = 1000, onCssReady = () => {}, onFontsReady = () => {} } = {},\n) => {\n  const loadedPromise = (async () => {\n    try {\n      await injectCSS(cssUrl)\n      onCssReady()\n      if (onFontsReady) {\n        await document.fonts.ready\n        onFontsReady()\n      }\n    } catch (e) {\n      return\n    }\n  })()\n  return Promise.race([\n    loadedPromise,\n    new Promise((resolve) => {\n      setTimeout(resolve, timeout)\n    }),\n  ])\n}\n\nconst injectCSS = (cssUrl, { crossOrigin } = {}) => {\n  return new Promise((resolve, reject) => {\n    const link = document.createElement(\"link\")\n    link.rel = \"stylesheet\"\n    link.onload = resolve\n    link.onerror = reject\n    link.href = cssUrl\n    link.crossOrigin = crossOrigin\n    document.head.appendChild(link)\n  })\n}\n\nexport const nextIDLEPromise = window.requestIdleCallback\n  ? ({ timeout = 60 } = {}) => {\n      return new Promise((resolve) => {\n        window.requestIdleCallback(resolve, { timeout })\n      })\n    }\n  : () => {\n      return new Promise((resolve) => {\n        window.requestAnimationFrame(resolve)\n      })\n    }\n",
    "import { DEV } from \"#env\"\nimport { loadCSSAndFonts, nextIDLEPromise } from \"./app_loader_utils.js\"\n\nexport const loadApp = async ({ updateSplashscreenText }) => {\n  if (DEV) {\n    performance.measure(`loading app`)\n  }\n\n  // try to load CSS + get the main fonts before displaying any text\n  // to avoid font swapping if possible\n  // give max 400ms for this\n  const appLoaderCssPromise = loadCSSAndFonts(\n    new URL(\"./app_loader.css\", import.meta.url),\n    {\n      timeout: 400,\n      onCssReady: () => {\n        if (DEV) {\n          performance.measure(`app_loader.css ready`)\n        }\n      },\n      onFontsReady: () => {\n        if (DEV) {\n          performance.measure(`fonts ready`)\n        }\n      },\n    },\n  )\n  // start importing app right away\n  const appPromise = importApp({\n    onJsReady: () => {\n      if (DEV) {\n        performance.measure(\"app.js ready\")\n      }\n    },\n  })\n  const appCSSPromise = loadCSSAndFonts(\n    new URL(\"../app/app.css\", import.meta.url),\n    {\n      onCssReady: () => {\n        if (DEV) {\n          performance.measure(`app.css ready`)\n        }\n      },\n    },\n  )\n\n  await appLoaderCssPromise\n  const app = await appPromise\n  if (DEV) {\n    performance.measure(`rendering app`)\n  }\n  await app.createMilleSabordGame({\n    into: document.querySelector(\"#app\"),\n    onLoadProgress: ({ loadedCount, total }) => {\n      updateSplashscreenText(`\n  Chargement du jeu...\n  <div>${loadedCount}/${total}</div>\n`)\n    },\n  })\n  await appCSSPromise\n  // app.render() can be very expensive so we wait a bit\n  // to let navigator an opportunity to cooldown\n  // This should help to save battery power and RAM\n  await nextIDLEPromise()\n  if (DEV) {\n    performance.measure(`app rendered`)\n  }\n}\n\nconst importApp = async ({ onJsReady = () => {} }) => {\n  const app = await import(\"../app/app.jsx\")\n  onJsReady()\n  return app\n}\n"
  ]
}