self.jsenvBuildUrls=["assets/ArrrMateyBb-wn3-3d20259e.ttf","assets/BarbeRouge-b4a9d8e9.png","assets/boat-dc6ca6cf.png","assets/CapitaineCrochet-0ce0da4f.png","assets/card_1skull-47b3b46a.png","assets/card_2skulls-61ce4149.png","assets/card_2sword-challenge-5c1924fd.png","assets/card_3sword-challenge-4097c59a.png","assets/card_4sword-challenge-f3927ba3.png","assets/card_animals-e97f74ef.png","assets/card_chest-037b957f.png","assets/card_coin-19c1c721.png","assets/card_default-d777c0de.png","assets/card_diamond-ae0da860.png","assets/card_pirate-57c15344.png","assets/card_small-1skull-3c9f4a9f.png","assets/card_small-2skulls-683eae22.png","assets/card_small-animals-b931298f.png","assets/card_small-chest-b171aea9.png","assets/card_small-coin-a99cbd8e.png","assets/card_small-diamond-d3b35497.png","assets/card_small-pirate-ada07362.png","assets/card_small-sword-challenge-dc6ca6cf.png","assets/card_small-witch-5e50e07c.png","assets/card_witch-24c51955.png","assets/card-rules-dialog-50665232.css","assets/character-selection-181bd1c8.css","assets/chest-ecf6979a.css","assets/cursed-grid-d5dc17c3.png","assets/dialog.base-81195bc9.css","assets/dialog-8b512a79.css","assets/dialog.wood-519851b1.css","assets/dice_coin-37896c9d.png","assets/dice_diamond-6c36ed54.png","assets/dice_monkey-044ce09c.png","assets/dice_parrot-21f5c4b5.png","assets/dice_skull-271c6b85.png","assets/dice_sword-f0ac96f9.png","assets/dice-ongoing-401ead15.css","assets/dice-b1c540cc.css","assets/draw-card-dialog-5d3f49fd.css","assets/favicon-25e95a00.png","assets/footer-4991a0c0.css","assets/game-configuration-ebf280f3.css","assets/GinetteBoulette-de6a1ce1.png","assets/header-4c28c2d6.css","assets/home-2e7e167b.css","assets/JackSparrow-f439b5cc.png","assets/loadscreen-f1f98571.css","assets/Luffy-59728a08.png","assets/main-0218d392.css","assets/metal-36435573.jpg","assets/mille-sabord-cee7f4b1.css","assets/MissFortune-4b135ade.png","assets/pirate-hook-02-3db1b696.png","assets/pirate-hook-02fba0b6.png","assets/PirateTreasureDemo-4B3MB-febb1694.otf","assets/round-2b248ac6.css","assets/round.score-00ca4100.css","assets/s-4e88d0d7.js","assets/score-board-c673d856.css","assets/sea-096e0699.jpg","assets/settings-9e052f21.css","assets/skull-bottle-7c833fb2.png","assets/skull-island-87ab7c27.css","assets/skullsandcrossbones-70af14b1.ttf","assets/star-rain-7a40ced1.css","assets/start-player-round-dialog-2527853b.css","assets/stone-417f342b.png","assets/swords-disabled-124616f0.png","assets/treasure-map-6ec97baa.png","assets/win-treasure-7f39a7fa.png","assets/witch-label-f95d3d2f.png","assets/wood-box-fcdd41cc.jpg","assets/wood-3c23f120.jpg","assets/wood-1edfbf4b.png","assets/wood2-15862f37.png","App-ab062b7d.js","importmap.prod-9a646398.importmap","main.component-63d73ce7.js","main-17409aa6.js","main.prod.html"],self.jsenvStaticUrlsHash={"main.prod.html":"bb6a9908"},self.config={};const{config:config}=self;config.cacheName="jsenv-sw-1",config.extraUrlsToCacheOnInstall=[],config.urlMap={},config.shouldHandleRequest=(e,{requestWasCachedOnInstall:s})=>("GET"===e.method||"HEAD"===e.method)&&s,config.shouldReloadOnInstall=()=>!1,config.shouldCleanOnActivate=(e,s,{requestWasCachedOnInstall:a})=>!a,config.shouldCleanOtherCacheOnActivate=e=>e.startsWith("jsenv-sw"),config.logsEnabled=!0,config.logsBackgroundColor="#ffdc00",config.disableNavigationPreload=!1,config.cacheName="mille-sabords",config.urlMap={"/":"main.prod.html"},config.extraUrlsToCacheOnInstall=[];const{jsenvBuildUrls:jsenvBuildUrls=[]}=self;if(!Array.isArray(jsenvBuildUrls))throw new TypeError(`self.jsenvBuildUrls should be an array, got ${jsenvBuildUrls}`);if(void 0===typeof config)throw new Error("config is not in scope, be sure to import sw.preconfig.js before sw.jsenv.js");const{cacheName:cacheName}=config;if("string"!=typeof cacheName)throw new TypeError(`config.cacheName should be a string, got ${cacheName}`);const{extraUrlsToCacheOnInstall:extraUrlsToCacheOnInstall}=config;if(!Array.isArray(extraUrlsToCacheOnInstall))throw new TypeError(`config.extraUrlsToCacheOnInstall should be an array, got ${extraUrlsToCacheOnInstall}`);const{urlMap:urlMap}=config;if("object"!=typeof urlMap)throw new TypeError(`config.urlMap should be an object, got ${urlMap}`);const{shouldReloadOnInstall:shouldReloadOnInstall}=config;if("function"!=typeof shouldReloadOnInstall)throw new TypeError(`config.shouldReloadOnInstall should be a function, got ${shouldReloadOnInstall}`);const{shouldCleanOnActivate:shouldCleanOnActivate}=config;if("function"!=typeof shouldCleanOnActivate)throw new TypeError(`config.shouldCleanOnActivate should be a function, got ${shouldCleanOnActivate}`);const{shouldCleanOtherCacheOnActivate:shouldCleanOtherCacheOnActivate}=config;if("function"!=typeof shouldCleanOtherCacheOnActivate)throw new TypeError(`config.shouldCleanOtherCacheOnActivate should be a function, got ${shouldCleanOtherCacheOnActivate}`);const{shouldHandleRequest:shouldHandleRequest}=config;if("function"!=typeof shouldHandleRequest)throw new TypeError(`config.shouldHandleRequest should be a function, got ${shouldHandleRequest}`);const{logsEnabled:logsEnabled}=config;if("boolean"!=typeof logsEnabled)throw new TypeError(`config.logsEnabled should be a boolean, got ${logsEnabled}`);const{logsBackgroundColor:logsBackgroundColor}=config;if("string"!=typeof logsBackgroundColor)throw new TypeError(`config.logsBackgroundColor should be a string, got ${logsBackgroundColor}`);const{disableNavigationPreload:disableNavigationPreload}=config;if("boolean"!=typeof disableNavigationPreload)throw new TypeError(`config.disableNavigationPreload should be a boolean, got ${disableNavigationPreload}`);const urlsToCacheOnInstall=[...self.jsenvBuildUrls,...config.extraUrlsToCacheOnInstall].map(resolveUrl),urlMapping={};Object.keys(urlMap).forEach((e=>{urlMapping[resolveUrl(e)]=resolveUrl(urlMap[e])}));const install=async()=>{info("install start");try{const e=urlsToCacheOnInstall.length;let s=0;await Promise.all(urlsToCacheOnInstall.map((async e=>{try{const a=new Request(e),t=await caches.match(a);if(t){if(!responseCacheIsValid(t)&&config.shouldReloadOnInstall(t,a,{requestWasCachedOnInstall:urlsToCacheOnInstall.includes(a.url)})){info(`${a.url} in cache but should be reloaded`);const t=new Request(e,{cache:"reload"});await fetchAndCache(t,{oncache:()=>{s+=1}})}else info(`${a.url} already in cache`),s+=1}else await fetchAndCache(a,{oncache:()=>{s+=1}})}catch(s){warn(`cannot put ${e} in cache due to error while fetching: ${s.stack}`)}}))),info(s===e?`install done (${e} urls added in cache)`:`install done (${s}/${e} urls added in cache)`)}catch(e){e(`install error: ${e.stack}`)}};self.addEventListener("install",(e=>{e.waitUntil(install())}));const handleRequest=async(e,s)=>{info(`received fetch event for ${e.url}`);try{const a=await caches.match(e);if(a)return info(`respond with response from cache for ${e.url}`),a;const t=await s.preloadResponse;if(t)return info(`respond with preloaded response for ${e.url}`),t}catch(s){return warn(`error while trying to use cache for ${e.url}`,s.stack),fetch(e)}return info(`no cache for ${e.url}, fetching it`),fetchAndCache(e)},remapRequest=e=>{if(Object.prototype.hasOwnProperty.call(urlMapping,e.url)){return new Request(urlMapping[e.url],e)}return e};self.addEventListener("fetch",(e=>{const s=remapRequest(e.request);if(config.shouldHandleRequest(s,{requestWasCachedOnInstall:urlsToCacheOnInstall.includes(s.url)})){const a=handleRequest(s,e);a&&e.respondWith(a)}}));const activate=async()=>{info("activate start"),await Promise.all([enableNavigationPreloadIfPossible(),deleteOtherUrls(),deleteOtherCaches()]),info("activate done")},enableNavigationPreloadIfPossible=async()=>{!config.disableNavigationPreload&&self.registration.navigationPreload&&await self.registration.navigationPreload.enable()},deleteOtherUrls=async()=>{const e=await caches.open(config.cacheName),s=await e.keys();await Promise.all(s.map((async s=>{const a=await e.match(s);config.shouldCleanOnActivate(a,s,{requestWasCachedOnInstall:urlsToCacheOnInstall.includes(s.url)})&&(info(`delete ${s.url}`),await e.delete(s))})))},deleteOtherCaches=async()=>{const e=await caches.keys();await Promise.all(e.map((async e=>{e!==config.cacheName&&config.shouldCleanOtherCacheOnActivate(e)&&(info(`delete cache ${e}`),await caches.delete(e))})))};self.addEventListener("activate",(e=>{const s=activate();s&&e.waitUntil(s)}));const actions={skipWaiting:()=>{self.skipWaiting()},ping:()=>"pong",refreshCacheKey:async e=>{e=String(new URL(e,self.location));return(await fetchAndCache(new Request(e,{cache:"reload"}))).status},addCacheKey:async e=>{e=String(new URL(e,self.location));return(await fetchAndCache(e)).status},removeCacheKey:async e=>{e=String(new URL(e,self.location));const s=await caches.open(config.cacheName);return await s.delete(e)}};self.addEventListener("message",(async e=>{const{data:s}=e;if("object"!=typeof s)return;const{action:a}=s,t=actions[a];if(!t)return;const{args:n=[]}=s;let o,c;try{const e=await t(...n);o="resolved",c=e}catch(e){o="rejected",c=e}e.ports[0].postMessage({status:o,value:c})}));const createLogMethod=e=>config.logsEnabled?(...s)=>console[e](...prefixArgs(...s)):()=>{},info=createLogMethod("info"),warn=createLogMethod("warn"),prefixArgs=(...e)=>["%csw",`background: ${config.logsBackgroundColor}; color: black; padding: 1px 3px; margin: 0 1px`,...e],caches=self.caches,fetchUsingNetwork=async e=>{const s=new AbortController,{signal:a}=s;try{return await fetch(e,{signal:a})}catch(e){throw s.abort(),e}};let cache;const getCache=async()=>cache||(cache=await caches.open(config.cacheName),cache),fetchAndCache=async(e,{oncache:s}={})=>{const[a,t]=await Promise.all([fetchUsingNetwork(e),getCache()]);if(200===a.status){info(`fresh response found for ${e.url}, put it in cache and respond with it`);const n=t.put(e,a.clone());return s&&(await n,s()),a}return info(`cannot put ${e.url} in cache due to response status (${a.status})`),a},responseCacheIsValid=e=>{const s=e.headers.get("cache-control"),a=parseMaxAge(s);return a&&a>0},parseMaxAge=e=>{if(!e||0===e.length)return null;const s=e.match(/([a-zA-Z][a-zA-Z_-]*)\s*(?:=(?:"([^"]*)"|([^ \t",;]*)))?/g)||[],a={};return Array.from(s).forEach((e=>{const s=e.split("=",2),[t]=s;let n=null;s.length>1&&(n=s[1].trim()),a[t.toLowerCase()]=n})),parseDuration(a["max-age"])},parseDuration=e=>{if(!e)return null;const s=Number.parseInt(e,10);return!Number.isFinite(s)||s<0?null:s},resolveUrl=e=>String(new URL(e,self.location));
//# sourceMappingURL=service-worker.js.map