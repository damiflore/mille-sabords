self.jsenvBuildDynamicUrls=["assets/ArrrMateyBb-wn3-3d20259e.ttf","assets/BarbeRouge-b4a9d8e9.png","assets/boat-dc6ca6cf.png","assets/CapitaineCrochet-0ce0da4f.png","assets/card_1skull-47b3b46a.png","assets/card_2skulls-61ce4149.png","assets/card_2sword-challenge-5c1924fd.png","assets/card_3sword-challenge-4097c59a.png","assets/card_4sword-challenge-f3927ba3.png","assets/card_animals-e97f74ef.png","assets/card_chest-037b957f.png","assets/card_coin-19c1c721.png","assets/card_default-d777c0de.png","assets/card_diamond-ae0da860.png","assets/card_pirate-57c15344.png","assets/card_small-1skull-3c9f4a9f.png","assets/card_small-2skulls-683eae22.png","assets/card_small-animals-b931298f.png","assets/card_small-chest-b171aea9.png","assets/card_small-coin-a99cbd8e.png","assets/card_small-diamond-d3b35497.png","assets/card_small-pirate-ada07362.png","assets/card_small-sword-challenge-dc6ca6cf.png","assets/card_small-witch-5e50e07c.png","assets/card_witch-24c51955.png","assets/card-rules-dialog-50665232.css","assets/character-selection-181bd1c8.css","assets/chest-ecf6979a.css","assets/cursed-grid-d5dc17c3.png","assets/dialog.base-81195bc9.css","assets/dialog-8b512a79.css","assets/dialog.wood-519851b1.css","assets/dice_coin-37896c9d.png","assets/dice_diamond-6c36ed54.png","assets/dice_monkey-044ce09c.png","assets/dice_parrot-21f5c4b5.png","assets/dice_skull-271c6b85.png","assets/dice_sword-f0ac96f9.png","assets/dice-ongoing-401ead15.css","assets/dice-b1c540cc.css","assets/draw-card-dialog-5d3f49fd.css","assets/favicon-25e95a00.png","assets/footer-4991a0c0.css","assets/game-configuration-ebf280f3.css","assets/GinetteBoulette-de6a1ce1.png","assets/header-4c28c2d6.css","assets/home-2e7e167b.css","assets/JackSparrow-f439b5cc.png","assets/loadscreen-f1f98571.css","assets/Luffy-59728a08.png","assets/main-0218d392.css","assets/metal-36435573.jpg","assets/mille-sabord-cee7f4b1.css","assets/MissFortune-4b135ade.png","assets/pirate-hook-02-3db1b696.png","assets/pirate-hook-02fba0b6.png","assets/PirateTreasureDemo-4B3MB-febb1694.otf","assets/pwa-icon-574c1c76.png","assets/round-2b248ac6.css","assets/round.score-00ca4100.css","assets/s-4e88d0d7.js","assets/score-board-c673d856.css","assets/sea-096e0699.jpg","assets/settings-c7b8b010.css","assets/skull-bottle-7c833fb2.png","assets/skull-island-87ab7c27.css","assets/skullsandcrossbones-70af14b1.ttf","assets/star-rain-7a40ced1.css","assets/start-player-round-dialog-2527853b.css","assets/stone-417f342b.png","assets/swords-disabled-124616f0.png","assets/treasure-map-6ec97baa.png","assets/win-treasure-7f39a7fa.png","assets/witch-label-f95d3d2f.png","assets/wood-box-fcdd41cc.jpg","assets/wood-3c23f120.jpg","assets/wood-1edfbf4b.png","assets/wood2-15862f37.png","App-213d4891.js","importmap.prod-f8cc8adf.importmap","main.component-63d73ce7.js","main-e99eaf86.js"],self.jsenvBuildStaticUrls=["assets/mille-sabords.webmanifest","main.prod.html"],self.jsenvStaticUrlsHash={"assets/mille-sabords.webmanifest":"913835fc","main.prod.html":"73dfb0c6"},self.config={};const{config:config}=self;config.cacheName="jsenv-sw-1",config.extraUrlsToCacheOnInstall=["/"],config.extraUrlsToReloadOnInstall=["/"],config.urlMap={},config.shouldHandleRequest=(e,{requestWasCachedOnInstall:s})=>("GET"===e.method||"HEAD"===e.method)&&s,config.shouldReloadOnInstall=()=>!1,config.shouldCleanOnActivate=(e,s,{requestWasCachedOnInstall:a})=>!a,config.shouldCleanOtherCacheOnActivate=e=>e.startsWith("jsenv-sw"),config.logLevel="warn",config.logsBackgroundColor="#ffdc00",config.navigationPreloadEnabled=!1,config.cacheName="mille-sabords";const assertContextLooksGood=()=>{const{jsenvBuildDynamicUrls:e}=self;if(void 0===e)self.jsenvBuildDynamicUrls=[];else if(!Array.isArray(e))throw new TypeError(`self.jsenvBuildDynamicUrls should be an array, got ${e}`);const{jsenvBuildStaticUrls:s}=self;if(void 0===s)self.jsenvBuildStaticUrls=[];else if(!Array.isArray(s))throw new TypeError(`self.jsenvBuildStaticUrls should be an array, got ${s}`);if(void 0===typeof config)throw new Error("config is not in scope, be sure to import sw.preconfig.js before sw.jsenv.js");const{cacheName:a}=config;if("string"!=typeof a)throw new TypeError(`config.cacheName should be a string, got ${a}`);const{extraUrlsToCacheOnInstall:t}=config;if(!Array.isArray(t))throw new TypeError(`config.extraUrlsToCacheOnInstall should be an array, got ${t}`);const{extraUrlsToReloadOnInstall:n}=config;if(!Array.isArray(n))throw new TypeError(`config.extraUrlsToReloadOnInstall should be an array, got ${n}`);const{urlMap:r}=config;if("object"!=typeof r)throw new TypeError(`config.urlMap should be an object, got ${r}`);const{shouldReloadOnInstall:o}=config;if("function"!=typeof o)throw new TypeError(`config.shouldReloadOnInstall should be a function, got ${o}`);const{shouldCleanOnActivate:c}=config;if("function"!=typeof c)throw new TypeError(`config.shouldCleanOnActivate should be a function, got ${c}`);const{shouldCleanOtherCacheOnActivate:l}=config;if("function"!=typeof l)throw new TypeError(`config.shouldCleanOtherCacheOnActivate should be a function, got ${l}`);const{shouldHandleRequest:i}=config;if("function"!=typeof i)throw new TypeError(`config.shouldHandleRequest should be a function, got ${i}`);const{logLevel:d}=config;if("string"!=typeof d)throw new TypeError(`config.logLevel should be a boolean, got ${d}`);const{logsBackgroundColor:g}=config;if("string"!=typeof g)throw new TypeError(`config.logsBackgroundColor should be a string, got ${g}`);const{navigationPreloadEnabled:f}=config;if("boolean"!=typeof f)throw new TypeError(`config.navigationPreloadEnabled should be a boolean, got ${f}`)},getUtil=()=>{const e={};e.createLogger=({logLevel:e,logsBackgroundColor:s})=>{const a=e=>(...a)=>console[e](...((...e)=>["%csw",`background: ${s}; color: black; padding: 1px 3px; margin: 0 1px`,...e])(...a)),t=a("debug"),n=a("info"),r=a("warn"),o=a("error"),c=()=>{};if("debug"===e)return{debug:t,info:n,warn:r,error:o};if("info"===e)return{debug:c,info:n,warn:r,error:o};if("warn"===e)return{debug:c,info:c,warn:r,error:o};if("error"===e)return{debug:c,info:c,warn:c,error:o};if("off"===e)return{debug:c,info:c,warn:c,error:c};throw new Error(`unknown logLevel, got ${e}`)},e.resolveUrl=e=>String(new URL(e,self.location)),e.toUniqueAndAbsoluteUrls=s=>{const a=[];return s.forEach((s=>{const t=e.resolveUrl(s);a.includes(t)||a.push(t)})),a},e.fetchUsingNetwork=async e=>{const s=new AbortController,{signal:a}=s;try{return await fetch(e,{signal:a})}catch(e){throw s.abort(),e}};{e.responseUsesLongTermCaching=e=>{const a=e.headers.get("cache-control"),t=s(a);return t&&t>0};const s=e=>{if(!e||0===e.length)return null;const s=e.match(/([a-zA-Z][a-zA-Z_-]*)\s*(?:=(?:"([^"]*)"|([^ \t",;]*)))?/g)||[],t={};return Array.from(s).forEach((e=>{const s=e.split("=",2),[a]=s;let n=null;s.length>1&&(n=s[1].trim()),t[a.toLowerCase()]=n})),a(t["max-age"])},a=e=>{if(!e)return null;const s=Number.parseInt(e,10);return!Number.isFinite(s)||s<0?null:s}}return e};assertContextLooksGood();const util=getUtil(),logger=util.createLogger(config),urlsToCacheOnInstall=util.toUniqueAndAbsoluteUrls([...self.jsenvBuildDynamicUrls,...self.jsenvBuildStaticUrls,...config.extraUrlsToCacheOnInstall]),urlsToReloadOnInstall=util.toUniqueAndAbsoluteUrls([...self.jsenvBuildStaticUrls,...config.extraUrlsToReloadOnInstall]),urlMapping={};Object.keys(config.urlMap).forEach((e=>{urlMapping[util.resolveUrl(e)]=util.resolveUrl(config.urlMap[e])}));const install=async()=>{logger.debug("install start");try{const e=urlsToCacheOnInstall.length;let s=0;await Promise.all(urlsToCacheOnInstall.map((async e=>{try{const a=new Request(e),t=await caches.match(a);if(t)if(decideIfShoulReload(t,a)){logger.info(`${a.url} in cache but should be reloaded`);const t=new Request(e,{cache:"reload"});await fetchAndCache(t,{oncache:()=>{s+=1}})}else logger.debug(`${a.url} already in cache`),s+=1;else await fetchAndCache(a,{oncache:()=>{s+=1}})}catch(s){logger.warn(`cannot put ${e} in cache due to error while fetching: ${s.stack}`)}}))),s===e?logger.debug(`install done (${e} urls added in cache)`):logger.debug(`install done (${s}/${e} urls added in cache)`)}catch(e){logger.error(`install error: ${e.stack}`)}},decideIfShoulReload=(e,s)=>{if(util.responseUsesLongTermCaching(e))return!1;if(urlsToReloadOnInstall.includes(s.url))return!0;return config.shouldReloadOnInstall(e,s,{requestWasCachedOnInstall:urlsToCacheOnInstall.includes(s.url)})};self.addEventListener("install",(e=>{e.waitUntil(install())}));const handleRequest=async(e,s)=>{logger.debug(`received fetch event for ${e.url}`);try{const a=await caches.match(e);if(a)return logger.debug(`respond with response from cache for ${e.url}`),a;const t=await s.preloadResponse;if(t)return logger.debug(`respond with preloaded response for ${e.url}`),t}catch(s){return logger.warn(`error while trying to use cache for ${e.url}`,s.stack),fetch(e)}return logger.debug(`no cache for ${e.url}, fetching it`),fetchAndCache(e)},remapRequest=e=>Object.prototype.hasOwnProperty.call(urlMapping,e.url)?redirectRequest(e,urlMapping[e.url]):e,redirectRequest=async(e,s)=>{const{mode:a}=e;if(logger.debug(`redirect request from ${e.url} to ${s}`),"navigate"!==a)return new Request(s,e);const t=e.clone(),{body:n,credentials:r,headers:o,integrity:c,referrer:l,referrerPolicy:i}=t,d=n?Promise.resolve(n):t.blob(),g=await d;return new Request(s,{body:g,credentials:r,headers:o,integrity:c,referrer:l,referrerPolicy:i,mode:"same-origin",redirect:"manual"})};self.addEventListener("fetch",(e=>{const s=remapRequest(e.request);if(config.shouldHandleRequest(s,{requestWasCachedOnInstall:urlsToCacheOnInstall.includes(s.url)})){const a=handleRequest(s,e);a&&e.respondWith(a)}}));const activate=async()=>{logger.debug("activate start"),await Promise.all([enableNavigationPreloadIfPossible(),deleteOtherUrls(),deleteOtherCaches()]),logger.debug("activate done")},enableNavigationPreloadIfPossible=async()=>{config.navigationPreloadEnabled&&self.registration.navigationPreload&&await self.registration.navigationPreload.enable()},deleteOtherUrls=async()=>{const e=await caches.open(config.cacheName),s=await e.keys();await Promise.all(s.map((async s=>{const a=await e.match(s);config.shouldCleanOnActivate(a,s,{requestWasCachedOnInstall:urlsToCacheOnInstall.includes(s.url)})&&(logger.debug(`delete ${s.url}`),await e.delete(s))})))},deleteOtherCaches=async()=>{const e=await caches.keys();await Promise.all(e.map((async e=>{e!==config.cacheName&&config.shouldCleanOtherCacheOnActivate(e)&&(logger.debug(`delete cache ${e}`),await caches.delete(e))})))};self.addEventListener("activate",(e=>{const s=activate();s&&e.waitUntil(s)}));const actions={skipWaiting:()=>{self.skipWaiting()},ping:()=>"pong",refreshCacheKey:async e=>{e=String(new URL(e,self.location));return(await fetchAndCache(new Request(e,{cache:"reload"}))).status},addCacheKey:async e=>{e=String(new URL(e,self.location));return(await fetchAndCache(e)).status},removeCacheKey:async e=>{e=String(new URL(e,self.location));const s=await caches.open(config.cacheName);return await s.delete(e)}};self.addEventListener("message",(async e=>{const{data:s}=e;if("object"!=typeof s)return;const{action:a}=s,t=actions[a];if(!t)return;const{args:n=[]}=s;let r,o;try{const e=await t(...n);r="resolved",o=e}catch(e){r="rejected",o=e}e.ports[0].postMessage({status:r,value:o})}));const caches=self.caches;let cache;const getCache=async()=>cache||(cache=await caches.open(config.cacheName),cache),fetchAndCache=async(e,{oncache:s}={})=>{const[a,t]=await Promise.all([util.fetchUsingNetwork(e),getCache()]);if(200===a.status){logger.debug(`fresh response found for ${e.url}, put it in cache and respond with it`);const n=t.put(e,a.clone());return s&&(await n,s()),a}return logger.warn(`cannot put ${e.url} in cache due to response status (${a.status})`),a};
//# sourceMappingURL=service-worker.js.map