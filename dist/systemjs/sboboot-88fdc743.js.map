{
  "version": 3,
  "sources": [
    "../../src/boot/boot.js"
  ],
  "names": [
    "appNode",
    "splashscreenNode",
    "boot",
    "setBootingState",
    "replaceNodeVariables",
    "_t",
    "n",
    "value",
    "direct",
    "then",
    "Promise",
    "resolve",
    "r",
    "o",
    "f",
    "args",
    "i",
    "arguments",
    "length",
    "apply",
    "this",
    "e",
    "reject",
    "document",
    "querySelector",
    "bootStartMs",
    "Date",
    "now",
    "splashIsVisible",
    "splashout",
    "setAttribute",
    "setTimeout",
    "killSplashscreen",
    "style",
    "display",
    "splashInTimeout",
    "bootingIsSlowTimeout",
    "body",
    "recover",
    "result",
    "a",
    "module",
    "loadApp",
    "updateSplashscreenText",
    "message",
    "clearTimeout",
    "innerHTML",
    "removeAttribute",
    "splashInMs",
    "msEllapsedSinceSplashIn",
    "msToWaitToPreventBlink",
    "error",
    "errorStack",
    "stack",
    "nextBootingState",
    "data",
    "splashscreenMessageNode",
    "variantModel",
    "variantInstance",
    "cloneNode",
    "appendChild",
    "node",
    "nodeName",
    "Array",
    "from",
    "childNodes",
    "forEach",
    "textContent",
    "replace",
    "_",
    "key",
    "hasOwnProperty",
    "window",
    "browserIsSupported"
  ],
  "mappings": "iFA8BMA,EACAC,EAMAC,EAyFAC,EAYAC,EAsdCC,EAAA,aAjgBAC,EAAA,SAAuBC,EAAOC,GAAAA,IAC/BA,EAAAA,OACGD,GAASA,EAAME,KAAOF,EAAME,KAAAA,GAAeC,QAAQC,WAbrDC,EAAA,SAAgBL,EAAOE,EAAMD,GAAAA,OAC/BA,EACIC,EAAOA,EAAKF,GAASA,GAExBA,GAAUA,EAAME,OACpBF,EAAQG,QAAQC,QAAQJ,IAElBE,EAAOF,EAAME,KAAKA,GAAQF,IArB3BM,EAAA,SAAgBC,GAAAA,OACf,WAAA,IACD,IAAIC,EAAO,GAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAChDD,EAAKC,GAAKC,UAAUD,GAAAA,IAAAA,OAGbN,QAAQC,QAAQG,EAAEK,MAAMC,KAAML,IACpC,MAAMM,GAAAA,OACAX,QAAQY,OAAOD,MAhDnBrB,EAAUuB,SAASC,cAAc,QACjCvB,EAAmBsB,SAASC,cAAc,iBAM1CtB,EAAAA,GAAAA,WAAAA,IAKEuB,EAAcC,KAAKC,MAErBC,GAAAA,EAMEC,EAAAA,GAAAA,WAAAA,OACJ5B,EAAiB6B,aAAa,iBAAkB,IAAAxB,EAC1C,IAAII,SAAQ,SAACC,GACjBoB,YAAW,WACTH,GAAAA,EACAjB,MACC,YAIDqB,EAAmB,WAGvB/B,EAAiBgC,MAAMC,QAAU,OACjCN,GAAAA,GAMIO,EAAkBJ,YAzBP,WACf9B,EAAiB6B,aAAa,gBAAiB,IAC/CF,GAAAA,IAvBmB,KAgDfQ,EAAuBL,YAAW,WACtC5B,EAvCoB,qBAbH,MAAA,OA6hBd,SAAgBkC,EAAMC,GAAAA,IAAAA,IAEvBC,EAASF,IACZ,MAAMhB,GAAAA,OACAiB,EAAQjB,GAAAA,OAEZkB,GAAUA,EAAO9B,KACb8B,EAAO9B,UAAAA,EAAa6B,GAErBC,EATD,EASCA,WAAAA,OA9eJC,EA5CkB,iBAAA5B,EA6CQ6B,EAAAA,OAAO,4BAAA,SAAApB,GAAA,OAAAT,GAAA,EAC3B8B,EADEA,SACM,CACZC,uBAAwB,SAACC,GACvBC,aAAaT,GACmBb,SAASC,cACvC,yBAEsBsB,UAAYF,MAAAA,WAAAA,GAIxCC,aAAaV,GACbU,aAAaT,IAERR,EAAAA,OACH5B,EAAQ+C,gBAAgB,qBAExBf,IAAAA,IAkcwBvB,EACzB8B,EA/bKS,EAAavB,EA3EA,IA4EbwB,EAA0BvB,KAAKC,MAAQqB,EAAAA,OA6bnBvC,EAAAA,WAAAA,OAnb1BT,EAAQ+C,gBAAgB,gBAiarB,SAAeV,EAAM5B,EAAMD,GAEH6B,IAAAA,IAGzBE,EAAS7B,QAAQC,QAAQ0B,KAAAA,OACtB5B,EAAO8B,EAAO9B,KAAKA,GAAQ8B,EACjC,MAAOlB,GAAAA,OACDX,QAAQY,OAAOD,IARjB,CA/ZGQ,GAAAA,WACNG,SAibCO,EAAAA,WAAAA,GA5bGU,EA1EuB,IAAA,CAAA,IA2EnBC,EA3EmB,IA4EED,EAAAA,OAAAA,EACrB,IAAIvC,SAAQ,SAACC,GACjBoB,WAAWpB,EAASuC,QAwbvBX,KACUA,EAAO9B,KACb8B,EAAO9B,KAAKA,GAEbA,aAAK8B,SApbFY,GAAAA,MACPN,aAAaT,GAEbjC,EAlFkB,gBAkFa,CAC7BiD,WACED,EAAME,OAAAA,4EAGJF,QAIJhD,EAAkB,SAACmD,GAAAA,IAAkBC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAO,GAC1CC,EAA0BjC,SAASC,cACvC,yBAEFgC,EAAwBV,UAAY,GAAA,IAC9BW,EAAelC,SAASC,cAAAA,IAAAA,OAAkB8B,IAC1CI,EAAkBD,EAAaE,WAAAA,GAErCvD,EAAqBsD,EAAiBH,GACtCC,EAAwBI,YAAYF,IAGhCtD,EAAuB,SAAvBA,EAAwByD,EAAMN,GACZ,UAAlBM,EAAKC,SAOTC,MAAMC,KAAKH,EAAKI,YAAYC,SAAQ,SAACL,GACnCzD,EAAqByD,EAAMN,MAP3BM,EAAKM,YAAcN,EAAKM,YAAYC,QAAQ,cAAc,SAACC,EAAGC,GAAAA,OACrDf,EAAKgB,eAAeD,GAAOf,EAAKe,GAAO,aAUhDE,OAAOC,+BACHvE",
  "sourcesContent": [
    "/*\n * This file is inlined in the HTML file by [data-jsenv-force-inline]\n * Responsabilities:\n * - inject the dev ribbon in development mode\n * - Dynamic import of \"app_loader.js\" (fetch+parse+execute)\n *   - Catch error during the dynamic import\n *   - Display splashscreen during this dynamic import\n * - Call loadApp exported by \"app_loader.js\"\n *   - Provide an updateSplashscreenText\n *   - Hide splashscreen once app is ready to be displayed\n */\n\nimport { DEV } from \"#env\"\n\nif (DEV) {\n  const { injectDevRibbon } = await import(\"./dev_ribbon.js\")\n  injectDevRibbon()\n}\n\n// When it take more than \"BOOTING_SLOW\"ms for loadApp to resolve or call updateSplashscreenText\n// -> splashscreen displays <div id=\"booting_is_slow\"> content\nconst BOOTING_SLOW = 2500\n// When it takes less than \"SPLASHIN_DELAY\"ms for loadApp to resolve\n// -> we won't even show the splashscreen (happens on user second visit because everything is in browser cache)\nconst SPLASHIN_DELAY = 300\n// When less than \"SPLASHOUT_MIN_INTERVAL\"ms have ellapsed since splashin animation started\n// -> code ensures \"SPLASHOUT_MIN_INTERVAL\"ms ellapses before playing the splashout animation\n// This is to prevent a disturbing blink when loadApp resolves shortly after splashin animation\nconst SPLASHOUT_MIN_INTERVAL = 650\n\nconst appNode = document.querySelector(\"#app\")\nconst splashscreenNode = document.querySelector(\"#splashscreen\")\n\nconst BOOTING_START = \"booting_start\"\nconst BOOTING_IS_SLOW = \"booting_is_slow\"\nconst BOOTING_ERROR = \"booting_error\"\n\nconst boot = async () => {\n  if (DEV) {\n    performance.measure(`booting app`)\n  }\n\n  const bootStartMs = Date.now()\n\n  let splashIsVisible = false\n  const splashin = () => {\n    splashscreenNode.setAttribute(\"data-splashin\", \"\")\n    splashIsVisible = true\n  }\n\n  const splashout = async () => {\n    splashscreenNode.setAttribute(\"data-splashout\", \"\")\n    await new Promise((resolve) => {\n      setTimeout(() => {\n        splashIsVisible = false\n        resolve()\n      }, 300)\n    })\n  }\n\n  const killSplashscreen = () => {\n    // Here splashscreen is \"killed\" with display: 'none' but it could also\n    // be removed from the DOM\n    splashscreenNode.style.display = \"none\"\n    splashIsVisible = false\n    if (DEV) {\n      performance.measure(`app displayed`)\n    }\n  }\n\n  const splashInTimeout = setTimeout(splashin, SPLASHIN_DELAY)\n\n  const bootingIsSlowTimeout = setTimeout(() => {\n    setBootingState(BOOTING_IS_SLOW)\n  }, BOOTING_SLOW)\n\n  try {\n    setBootingState(BOOTING_START)\n    const { loadApp } = await import(\"../app_loader/app_loader.js\")\n    await loadApp({\n      updateSplashscreenText: (message) => {\n        clearTimeout(bootingIsSlowTimeout)\n        const splashscreenMessageNode = document.querySelector(\n          \"#splashscreen_message\",\n        )\n        splashscreenMessageNode.innerHTML = message\n      },\n    })\n\n    clearTimeout(splashInTimeout)\n    clearTimeout(bootingIsSlowTimeout)\n\n    if (!splashIsVisible) {\n      appNode.removeAttribute(\"data-booting\")\n      // app was super fast to load, splashscreen was not even displayed, cool\n      killSplashscreen()\n      return\n    }\n\n    const splashInMs = bootStartMs + SPLASHIN_DELAY\n    const msEllapsedSinceSplashIn = Date.now() - splashInMs\n\n    if (msEllapsedSinceSplashIn < SPLASHOUT_MIN_INTERVAL) {\n      const msToWaitToPreventBlink =\n        SPLASHOUT_MIN_INTERVAL - msEllapsedSinceSplashIn\n      await new Promise((resolve) => {\n        setTimeout(resolve, msToWaitToPreventBlink)\n      })\n    }\n\n    appNode.removeAttribute(\"data-booting\")\n    // Wait the end of the \"splashout\" animation before killing splashscreen entirely\n    await splashout()\n    killSplashscreen()\n  } catch (error) {\n    clearTimeout(bootingIsSlowTimeout)\n\n    setBootingState(BOOTING_ERROR, {\n      errorStack:\n        error.stack ||\n        `<No stack associated with this error> (Check devtools to get more info)`,\n    })\n    throw error\n  }\n}\n\nconst setBootingState = (nextBootingState, data = {}) => {\n  const splashscreenMessageNode = document.querySelector(\n    \"#splashscreen_message\",\n  )\n  splashscreenMessageNode.innerHTML = \"\"\n  const variantModel = document.querySelector(`#${nextBootingState}`)\n  const variantInstance = variantModel.cloneNode(true)\n\n  replaceNodeVariables(variantInstance, data)\n  splashscreenMessageNode.appendChild(variantInstance)\n}\n\nconst replaceNodeVariables = (node, data) => {\n  if (node.nodeName === \"#text\") {\n    node.textContent = node.textContent.replace(/\\${(\\w*)}/g, (_, key) => {\n      return data.hasOwnProperty(key) ? data[key] : \"\"\n    })\n    return\n  }\n\n  Array.from(node.childNodes).forEach((node) => {\n    replaceNodeVariables(node, data)\n  })\n}\n\nif (window.browserIsSupported) {\n  await boot()\n}\n"
  ]
}